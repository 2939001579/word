#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

// 加密函数
string encryptPassword(string password) {
    for (int i = 0; i < password.length(); i++) {
        password[i] = password[i] + i + 1 + 3; // ASCII码加上位置和偏移值3
    }
    swap(password[0], password[password.length() - 1]); // 调换第一位和最后一位顺序
    reverse(password.begin(), password.end()); // 反转字符串
    return password;
}

// 解密函数
string decryptPassword(string encryptedPassword) {
    reverse(encryptedPassword.begin(), encryptedPassword.end()); // 反转字符串
    swap(encryptedPassword[0], encryptedPassword[encryptedPassword.length() - 1]); // 调换第一位和最后一位顺序
    for (int i = 0; i < encryptedPassword.length(); i++) {
        encryptedPassword[i] = encryptedPassword[i] - i - 1 - 3; // ASCII码减去位置和偏移值3
    }
    return encryptedPassword;
}

// 判断密码强度函数
string getPasswordStrength(string password) {
    if (password.length() < 8 || (password.length() >= 8 && (password.find_first_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") == string::npos || password.find_first_of("0123456789") == string::npos))) {
        return "弱强度";
    }
    else if (password.find_first_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") != string::npos && password.find_first_of("0123456789") != string::npos) {
        return "中强度";
    }
    else if (password.find_first_of("abcdefghijklmnopqrstuvwxyz") != string::npos && password.find_first_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ") != string::npos && password.find_first_of("0123456789") != string::npos) {
        return "高强度";
    }
    else {
        return "未知强度";
    }
}

// 密码生成函数
string generatePassword(int length) {
    string password = "";
    string characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    for (int i = 0; i < length; i++) {
        password += characters[rand() % characters.length()];
    }
    return password;
}

int main() {
    int choice;
    string password;

    while (true) {
        cout << "密码管理系统" << endl;
        cout << "1. 加密密码" << endl;
        cout << "2. 解密密码" << endl;
        cout << "3. 判断密码强度" << endl;
        cout << "4. 生成密码" << endl;
        cout << "0. 退出" << endl;
        cout << "请输入菜单选项：";
        cin >> choice;

        if (choice == 1) {
            cout << "请输入要加密的密码：";
            cin >> password;
            string encryptedPassword = encryptPassword(password);
            cout << "加密后的密码：" << encryptedPassword << endl;
        }
        else if (choice == 2) {
            cout << "请输入要解密的密码：";
            cin >> password;
            string decryptedPassword = decryptPassword(password);
            cout << "解密后的密码：" << decryptedPassword << endl;
        }
        else if (choice == 3) {
            cout << "请输入要判断的密码：";
            cin >> password;
            string strength = getPasswordStrength(password);
            cout << "密码强度：" << strength << endl;
        }
        else if (choice == 4) {
            int length;
            cout << "请输入要生成的密码长度：";
            cin >> length;
            string generatedPassword = generatePassword(length);
            cout << "生成的密码：" << generatedPassword << endl;
        }
        else if (choice == 0) {
            break;
        }
        else {
            cout << "无效的菜单选项！" << endl;
        }
    }

    return 0;
}